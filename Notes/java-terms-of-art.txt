 Anatomy of a Java Program:

Defintions:
3. Method - a method is a function that is apart of class
class Main {
    void main () {
    }
}
2. Class - A container for one or more related functions; helps organize codes.

class Main {
    void main () {
    }
}

* the functions between a  class is a method*

1. Function - A function is the smallest block of code in java that can perform a specific task; n java.
      void main () {
        }

*main is the entry point to java programs*
Whenever a java program is run the main function is called and the code inside gets executed
*a funciton should never be alone and should always belong to a class*

All classes and methods should have a access modifier- a special keyword that determines if other classes and methods
can access these classes and methods  ex( public & private)
Ex:
 public class Main {
    public void main() {

    }
 }

 When naming classes we use the PascalNamingConvention
 When naming methods we use the camelNamingConvention - capatilize the first letter of every word except the first word

Field -
Variable -

How Java Gets Executed:

There are two steps that contribute to executable code;
1. Compilation - InteliJ uses the java compilers; to compile code into a different format: (java byte code)
2. Execution

the java byte code is run independant if you have a JRE (Java Runtime Enviroment)

JRE - has a software component known as JVM (Java Virtual Machine) takes java byte code to the native code of the
underlying operating system.

Compiled Machine language - Directly translate the program without any assistance. This language is directly converted
into machine code; which is usally faster and more efficient than interpreted languages Ex: C, C++, Rust

Interpreted Language - Not directly translated but instead used a different program known as
a "interpreter", to read and execute code. They run through lines of code 1 by 1 ; and allow users to edit code without
having to rewrite everything Ex: JavaScript, Python, Ruby, PHP
*Typically more flexible but slower*

DEFINITIONS:
OOP - (Object Oriented Programming) Typically used in programming to as containers that house data and methods
Inheritance - A hierarchy of classes that share a set of attributes and methods. Access Modifiers define what classes can access (attributes or method).
Encapsulation - The idea of building data and methods that work on data within a unit… aka a “class’ This process can also be used to hide internal representation or state of an object. Also known as “Information Hiding” . You disguise an attribute and make invisible from the outside of an object, and combine it with methods that provide read and write access… allowing specific information and control access to the internal state of the object
Abstraction- a concept that shows only essential attributes and “hide” unnecessary information/details from the user. Selecting data from a larger pool and showing only relevant details of the object to the user.
 Ex: Make a list of info that you would need in an application to start a bank account.
Name
Age
Address
Tax Info
Favorite color
Favorite Cereal
Favorite food
		*Some info is absolutely necessary for a banking application & some is not. We can still use the additional info but not in this context*
Polymorphism - Describes situations in which something occurs in several different forms.
All classes extend the class object; so all objects in java are polymorphic because they pass two instanceof checks
Static Polymorphism - implement multiple methods within the same class that uses the same name. Method overloading
Dynamic Polymorphism - occurs when there are one or more classes or objects related to each other by inheritance. Inheritance lets users inherit attributes and methods… polymorphism uses these methods to perform different task and communicate

Mosh Videos; Data Types

- Variables are used to temporarily whole values

public static void main(String[] args) {
    int age = 30;
    System.out.println(age);
}
    - Declare a variable; in this case int represents whole numbers (no decimals points)
    - We name the variable which also known as  the "identifier
    - the "=" sign is an assignment operator
    - We're initialize the variable at value of 30

References Types:

Primitive: numbers, characters, booleans - for storing simple values
byte, short, int, long, float, double, char, boolean
Reference: date, mail message - for storing complex objects

A string is also known as a string literal

-Escape Sequences:
*How to include special characters within a string*:
Ex1:
public class Main {
    public static void main (String[] args) {
        String message = "Hello \"Mosh\""; - if we add a double quote, we have to use backslashes
        System.out.pringln(message);
    }
}
**Will Return** : Hello " Mosh"

Ex2: Lets say we wanted to add a file directory:
public class Main {
    public static void main (String[] args) {
        // c:\Windows\...
        String message = "c:\\Windows\\..."; - notice that there are two backslashes but only one prints
        System.out.pringln(message);
    }
}
**Will Return** :
c:\Windows\...

Ex3: Adding a new line to strings:
public class Main {
    public static void main (String[] args) {
        // c:\Windows\...
        String message = "c:\nWindows\\..."; - Used to add new lines to strings
        System.out.pringln(message);
    }
}
**Will Return** :
c:
Windows\...

Ex 4: Adding a new tab:
public class Main {
    public static void main (String[] args) {
        // c:\Windows\...
        String message = "c:\tWindows\\..."; - Used to add new lines to strings
        System.out.pringln(message);
    }
}
**Will Return** :
c:  Windows\...


                ------*****Arrays*****-------:
    "Use to arrays to store a list of items like; people, items, food"

public class Main {
    public static void main (String[] args) {
     int[] numbers  = new int[5];
     numbers[0]  = 1;
     numbers[1] = 2;

     System.out.println(Arrays.toString(numbers)); We use this class called arrays & we use the .notation to access various methods
    }
}


**Will Return**
[1,2,0,0,0] The zeros are default values since we did not input any values for the 5 things within the array.
If this was a boolean array, the default would be false
If this was a string array, the  default would be empty strings

----**More Efficient way of creating arrays; typically when you know  the values beforehand
public class Main {
    public static void main (String[] args) {
     int[] numbers  = {2,3,5,1,4};
     System.out.println(numbers.length);
   }
}
**Will return** :
5
[2,3,5,1,4]
**Arrays have a fixed length; this array is **
.notaion options can be overloaded based on the number of parameter types

Ex: Print out the numbers in order using sort() method:

public class Main {
    public static void main (String[] args) {
         int[] numbers  = {2,3,5,1,4};
         Arrays.sort(numbers);
         System.out.println(Arrays.toString(numbers));
   }
}
** Will Return**
[1,2,3,4,5]

                -----****Multi-Dimensional Arrays***-----
public class Main {
    public static void main (String[] args) {
    int[][] numbers = new int [2][3]; - the number of arrays and the lengths of each dimension
           numbers[0][0] = 1;
         System.out.println(Arrays.deepToString(numbers));
   }
}
** Will Return**
[[1,0,0], [0,0,0]]
"A multidimensional Array"


public class Main {
    public static void main (String[] args) {
    int[][] numbers = { { 1, 2, 3}, { 4, 5, 6} }
         System.out.println(Arrays.deepToString(numbers));
   }
}

**Will Return**
[[1, 2, 3], [4, 5, 6]


                   ----**** Constants ****----
"Also known as a final variable; use all capital letters to name constants "
Ex:

public class Main {

    public static void main (String[] args) {
       final float PI = 3.14F;
       pi = 1;
   }
}

- 3.14F because java recognizes this as a decimal.. F represents float
- we can't change the value of PI once we already assigned a value to it.

                                        ----**** Arithmetic Expressions ****-----
In java, the division of two whole numbers will result in a whole number:

public static void main(String[] args) {
    int result = 10/3;
    System.out.println(result);
}

If you want the divison of two numbers to be an integer:

public static void main(String[] args) {
    double result = (double)10 / (double) 3;
    System.out.println(result);
}

Augmented Assignment Operators - (+=)

public static void main(String[] args) {
     int x = 1;
     x += 2;
    System.out.println(x);
}

                            ---*** Casting ***---
public static void main(String[] args) {
    double x 1.1;
    int y = (int)x +2
    System.out.println(y);
}
** If we wanted the result to be an integer rather than a decimal,
then we would have to do something called implicit casting; and cast
the result **




                                       Jan 10, 2022 Classes and Objects


Classes In Java & OOP:

- a class defines a custom data-type we can use through our program
- With OOP we want to structure an application that readable, maintainable
        Readability: The ability for code to be understood by outside developers with little context. Code should be able
            stand alone and till be understood.
        Maintainability: The ability for code to be reworked, and maintianed over a period of time. For a class to be easily maintained
            it should be broken down to essential parts. Its based off the idea of creating a more efficient way to sort data
            You can swap out small parts of your code in once place.
        Reusability: The ability for code to be reused throughout a program but also across many programs.


 What is a class?
    - A blueprint or an instructions manual for the object whihc is known as the "house"
    -It has two structure bases; a decleration and a definition

What are fields?
    - Are used to describe the properties or variables of a class.
    - Defined at the top layer of the class; directly within the code block
What are methods?
    - functions or "actions" a class can execute

        public static void exampleMethod () {

        System.out.println("Hello Example");
        }
    Types of Methods:
        - Constructors; allow program to create new instances of a class (object)
        - Getter/Setters; best practice to create a getter and setter for fields rather than accessing/assigning them.
            Specifically designed to upate a field value
    Fields vs Methods:
        -








